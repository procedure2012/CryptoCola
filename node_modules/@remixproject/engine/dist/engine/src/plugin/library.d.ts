import { Plugin } from './abstract';
import { Api, Profile, LibraryProfile } from '../../../utils';
export declare type LibraryApi<T extends Api, P extends Profile> = {
    [method in P['methods'][number]]: T['methods'][method];
} & {
    events: {
        on: (name: string, cb: (...args: any[]) => void) => void;
        emit: (name: string, ...args: any[]) => void;
    };
} & {
    render?(): Element;
};
interface LibraryViewProfile extends Profile, LibraryProfile {
    location?: string;
}
export declare function isViewLibrary(profile: any): profile is LibraryViewProfile;
export declare class LibraryPlugin<T extends Api, P extends LibraryViewProfile> extends Plugin {
    protected library: LibraryApi<T, P>;
    profile: P;
    private isView;
    constructor(library: LibraryApi<T, P>, profile: P);
    activate(): Promise<void>;
    deactivate(): void;
    /** Call a method from this plugin */
    protected callPluginMethod(key: string, payload: any[]): any;
}
export {};
