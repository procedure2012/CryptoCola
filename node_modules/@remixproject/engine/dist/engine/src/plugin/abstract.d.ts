import { Api, EventKey, EventParams, MethodKey, MethodParams, EventCallback, ApiMap, Profile, PluginRequest, PluginApi } from '../../../utils';
export interface RequestParams {
    name: string;
    key: string;
    payload: any[];
}
export declare abstract class Plugin<T extends Api = any, App extends ApiMap = any> {
    profile: Profile<T>;
    protected requestQueue: Array<() => Promise<any>>;
    protected currentRequest: PluginRequest;
    /** Give access to all the plugins registered by the engine */
    protected app: PluginApi<App>;
    onRegistation?(): void;
    onActivation?(): void;
    onDeactivation?(): void;
    constructor(profile: Profile<T>);
    readonly name: string;
    activate(): void;
    deactivate(): void;
    /** Call a method from this plugin */
    protected callPluginMethod(method: string, args: any[]): any;
    /** Add a request to the list of current requests */
    protected addRequest(request: PluginRequest, method: Profile<T>['methods'][number], args: any[]): Promise<unknown>;
    /** Listen on an event from another plugin */
    on<Name extends Extract<keyof App, string>, Key extends EventKey<App[Name]>>(name: Name, key: Key, cb: EventCallback<App[Name], Key>): void;
    /** Call a method of another plugin */
    call<Name extends Extract<keyof App, string>, Key extends MethodKey<App[Name]>>(name: Name, key: Key, ...payload: MethodParams<App[Name], Key>): Promise<ReturnType<App[Name]['methods'][Key]>>;
    /** Emit an event */
    emit<Key extends EventKey<T>>(key: Key, ...payload: EventParams<T, Key>): void;
}
