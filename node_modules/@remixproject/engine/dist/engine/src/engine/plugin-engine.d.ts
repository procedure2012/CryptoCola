import { Plugin } from '../plugin';
import { PluginRequest, ApiMap } from '../../../utils';
import { IPermissionHandler } from './persmission';
/** Transform an map of Api into a Map of Plugin. Used by PluginEngine for constructor */
export declare type PluginMap<T extends ApiMap> = {
    [name in keyof T]: Plugin<T[name]>;
};
/** The list of methods exposed by the PluginEngine */
interface ExposedMethods {
    [name: string]: {
        [key: string]: (requestInfo: PluginRequest, ...payload: any[]) => Promise<any>;
    };
}
/** The list of events exposed by the PluginEngine */
interface ExposedEvents {
    [recipient: string]: {
        [eventName: string]: (...payload: any[]) => void;
    };
}
/** A record of which plugin is listening on which event */
interface EventRecord {
    [eventName: string]: string[];
}
/** Optional settings of the PluginEngine */
export interface PluginEngineSettings {
    autoActivate: boolean;
    permissionHandler: IPermissionHandler;
    natives: string[];
}
declare abstract class AbstractPluginEngine {
    protected methods: ExposedMethods;
    protected events: ExposedEvents;
    protected listeners: EventRecord;
    protected permissionHandler: IPermissionHandler;
    abstract register(plugins: Plugin | Plugin[]): void;
    abstract activate(names: string | string[]): void;
    abstract deactivate(names: string | string[]): void;
    abstract setSettings(settings: Partial<PluginEngineSettings>): void;
    abstract setSettings<K extends keyof PluginEngineSettings>(keyOrSetting: K | Partial<PluginEngineSettings>, value?: PluginEngineSettings[K]): void;
    onRegistration?(plugin: Plugin): void;
    onActivated?(plugin: Plugin): void;
    onDeactivated?(plugin: Plugin): void;
}
/**
 * Plugin Engine register, activate and deactive plugins.
 * It broadcasts events and redirect calls.
 */
export declare class PluginEngine<T extends ApiMap> extends AbstractPluginEngine {
    protected settings: Partial<PluginEngineSettings>;
    protected plugins: PluginMap<T>;
    protected methods: ExposedMethods;
    protected events: ExposedEvents;
    protected listeners: EventRecord;
    protected actives: string[];
    constructor(plugins: Partial<PluginMap<T>>, settings?: Partial<PluginEngineSettings>);
    private isRegistered;
    private isActive;
    /** Either it's not an IframeProfile or it's */
    private isNative;
    /** Update settings of the engine */
    setSettings(settings: Partial<PluginEngineSettings>): void;
    setSettings<K extends keyof PluginEngineSettings>(key: K, value?: PluginEngineSettings[K]): void;
    register(plugins: Plugin | Plugin[]): void;
    private registerOne;
    /** Activate one or several plugins */
    activate(names: Extract<keyof T, string> | Extract<keyof T, string>[]): Promise<void | void[]>;
    /** Activate one plugin */
    private activateOne;
    /** Deactivate one or several plugins */
    deactivate(names: string | string[]): Promise<void | void[]>;
    /** Deactivate one plugin */
    private deactivateOne;
}
export {};
